game ConnectFour


-- Board and input type definitions
--
type Board = Grid (6,7) of Player|Empty
type Input = Int

-- We need to convert column input into positions
--
col2pos : (Board,Int) -> Position
col2pos(b,c) = (7-countColumn(Empty,b,c),c)


-- Game setup
--
initialBoard : Board
--initialBoard(x,y) = Empty
initialBoard(x,y)= Empty

goFirst : Player
goFirst = A


-- Game ending: game-over condition and game outcome
--
gameOver : Board -> Bool
gameOver(b) = or(fourInARow(b),isFull(b))

outcome : (Board,Player) -> Player|Tie
outcome(b,p) = if inARow(4,A,b) then A else
               if inARow(4,B,b) then B else Tie 
--               if isFull(b)     then Tie -- this needs an else, also it is redundant due to loop()

fourInARow : Board -> Bool
fourInARow(b) = or(inARow(4,A,b),inARow(4,B,b))


-- Predefined operations
--
isValid : (Board,Position) -> Bool
isValid(b,p) = if b!p == Empty then True else False


-- Game loop
--
tryMove : (Player,Board) -> (Board,Player)
tryMove(p,b) = let pos = col2pos(input) in
                   if isValid(b,pos) then (place(p,b,pos),next(p))
                                     else (b,p)

loop : (Player,Board) -> (Player,Board)
loop(p,b) = while not(gameOver(b)) do tryMove(p,b)

play : (Player,Board) -> Player|Tie
play(a,b) = outcome(loop(a,b))
-- play(a,b) = outcome(while not(gameOver(b)) do tryMove(p,b))

result : Player|Tie
result = play(initialBoard,goFirst)
