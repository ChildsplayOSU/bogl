-- functions for testing nested tuple behavior
game Tuples

type Pair = (Int, Int)

type Board = Array (3,3) of Int
type Input = Int

b : Board
b!(x,y) = 0

isZero : (Pair, Board) -> Bool
isZero(p, b) = if b ! p == 0 then True else False

isZero' : (Int, Int, Board) -> Bool
isZero'(x,y,b) = if b ! (x,y) == 0 then True else False

fst : Pair -> Int
fst(a,b) = a

snd : Pair -> Int
snd(a,b) = b

foo : (Pair, Pair) -> Pair
foo(l,r) = (fst(l) + fst(r), snd(l) + snd(r))

bar : (Pair, Int) -> Pair
bar(p, i) = (fst(p) + snd(p), i)

f : (Int, Int) -> (Int, Int)
f(x,y) = (x+1, y+1)

g : (Int, Int) -> (Int, Int)
g(x,y) = (x-1,y-1)

h : (Int, Int) -> (Int, Int)
h(x,y) = (x*2, y*2)

testing : Int -> Int
testing(k) = let z = h(g(f((k,k)))) in
                 fst(z) + snd(z)

id : Pair -> Pair
id(a,b) = (a,b)
