game ConnectFour
-- note: this does not yet work 

-- Board and input type definitions
--
type Board = Grid (6,7) of A|B|Empty
type Input = Int

grab : (Board, Int, Int) -> (Int,Int) 
grab(b,column, row) = (column, row) 

findPos : (Board,Int, Int) -> (Board, Int, Int) 
findPos(b,column,count) = while (b ! (column,count) == Empty) 
    do findPos(b,column,count - 1)

-- We need to convert column input into positions
--
col2pos : (Board,Int) -> (Int,Int)
col2pos(b,c) = grab(findPos(b,c,7)) 

-- Game setup
--
initialBoard : Board
initialBoard!(x,y)= Empty

goFirst : A|B
goFirst = A


fourInARow : Board -> Bool
fourInARow(b) = or(inARow(4,A,b),inARow(4,B,b))

-- Game ending: game-over condition and game outcome
--
gameOver : Board -> Bool
gameOver(b) = or(fourInARow(b),isFull(b))

outcome : (Board,A|B) -> A|B|Tie
outcome(b,p) = if inARow(4,A,b) then A else
               if inARow(4,B,b) then B else Tie 

-- Predefined operations
--
isValid : (Board,(Int,Int)) -> Bool
isValid(b,p) = if b!p == Empty then True else False


-- Game loop
--
tryMove : (A|B,Board) -> (A|B, Board)
tryMove(p,b) = let pos = col2pos(input(b)) in
                   if isValid(b,pos) then (next(p), place(p,b,pos))
                                     else (p, b)

loop : (A|B,Board) -> (A|B,Board)
loop(p,b) = while not(gameOver(b)) do tryMove(p,b)

play : (A|B,Board) -> A|B|Tie
play(a,b) = outcome(loop(a,b))

result : A|B|Tie
result = play(initialBoard,goFirst)
