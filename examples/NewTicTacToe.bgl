game TicTacToe

-- Board and input type definitions
--
type Board = Grid (3,3) of X|O|Empty
type Input = Position




-- Game setup
--
initialBoard : Board
initialBoard!(x,y) = Empty

goFirst : X|O
goFirst = X

-- Game ending: game-over condition and game outcome
--
--gameOver(b) = or(threeInARow(b),isFull(b))


outcome : (X|O, Board) -> X|O|Tie
outcome(p, b) = if inARow(3,X,b) then X else
                if inARow(3,O,b) then O else Tie


threeInARow : Board -> Bool
threeInARow(b) = or(inARow(3,X,b), inARow(3,O,b))

gameOver : Board -> Bool
gameOver(b) = or(threeInARow(b), isFull(b))

-- Predefined operations
--
isValid : (Board,Position) -> Bool
isValid(b,p) = if b ! p == Empty then True else False

-- Game loop
--
tryMove : (X|O,Board) -> (X|O, Board)
tryMove(p,b) = let pos = input(b) in
                   if isValid(b,pos) then (next(p), place(p,b,pos))
                                     else (p, b)

loop : (X|O,Board) -> (X|O,Board)
loop(p,b) = while not(gameOver(b)) do tryMove(p,b)

play : (X|O,Board) -> X|O|Tie
play(a,b) = outcome(loop(a,b))

result : X|O|Tie
result = play(goFirst, initialBoard)


lessTen : Int -> Bool
lessTen(x) = x < 10

incr : Int -> Int
incr(x) = x + 1


whileTest : Int -> Int
whileTest(x) = while lessTen(x) do incr(x)
